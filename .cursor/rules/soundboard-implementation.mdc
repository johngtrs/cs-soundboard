---
description: Soundboard audio implementation and CS 1.6 theme guidelines
---

# Soundboard Implementation Guide

## Audio Files Structure

All Counter Strike 1.6 radio sounds are located in [radio/](mdc:radio/). These are authentic CS 1.6 audio files that should be integrated into the soundboard.

### Available Sounds Categorization

#### Team Communication
- `ct_affirm.wav` - CT Affirmative
- `ct_backup.wav` - CT Need Backup
- `ct_coverme.wav` - CT Cover Me
- `ct_enemys.wav` - CT Enemy Spotted
- `ct_fireinhole.wav` - CT Fire in the Hole
- `ct_imhit.wav` - CT Taking Fire
- `ct_inpos.wav` - CT In Position
- `ct_point.wav` - CT You Take the Point
- `ct_reportingin.wav` - CT Reporting In
- `roger.wav` - Roger That
- `negative.wav` - Negative

#### Commands
- `com_followcom.wav` - Follow Me Commander
- `com_getinpos.wav` - Get in Position
- `com_go.wav` - Go Go Go
- `com_reportin.wav` - Report In Team
- `followme.wav` - Follow Me
- `go.wav` - Go
- `letsgo.wav` - Let's Go
- `moveout.wav` - Move Out
- `sticktog.wav` - Stick Together Team
- `stormfront.wav` - Storm the Front
- `takepoint.wav` - Take the Point

#### Tactical Actions
- `fallback.wav` - Fall Back
- `regroup.wav` - Regroup Team
- `position.wav` - Hold This Position
- `locknload.wav` - Lock and Load
- `meetme.wav` - Meet Me Here
- `getout.wav` - Get Out of There

#### Game Events
- `bombpl.wav` - Bomb Planted
- `bombdef.wav` - Bomb Defused
- `blow.wav` - Bomb Exploding
- `ctwin.wav` - Counter-Terrorists Win
- `terwin.wav` - Terrorists Win
- `rounddraw.wav` - Round Draw
- `vip.wav` - VIP Killed
- `rescued.wav` - Hostages Rescued
- `hosdown.wav` - Hostage Down

#### Combat Feedback
- `enemydown.wav` - Enemy Down
- `matedown.wav` - Teammate Down
- `elim.wav` - Sector Clear
- `fireassis.wav` - Fire for Assistance
- `hitassist.wav` - Hit Confirmed
- `flankthem.wav` - Flank Them
- `circleback.wav` - Circle Back
- `clear.wav` - Area Clear

## Audio Implementation Requirements

### Audio Player Hook
Create a custom hook that handles:
- Multiple simultaneous sounds (CS 1.6 allows overlapping radio commands)
- Volume control with persistence (localStorage)
- Preloading sounds for instant playback
- Error handling for missing or corrupted audio files
- Visual feedback coordination

```tsx
interface AudioPlayerOptions {
  volume?: number;
  preload?: boolean;
  maxSimultaneousSounds?: number;
}

export function useAudioPlayer(options?: AudioPlayerOptions) {
  // Should track:
  // - Currently playing sounds (can be multiple)
  // - Audio instances
  // - Loading states
  // - Error states
  // - Volume level
}
```

### Sound Manager Requirements
- Allow multiple sounds to play at once (authentic CS 1.6 behavior)
- Implement a sound queue or limit (e.g., max 5 simultaneous sounds)
- Provide global volume control
- Support keyboard shortcuts for quick access
- Store user preferences (volume, favorites) in localStorage

## CS 1.6 Theme Guidelines

### Visual Design

#### Color Palette
Use colors inspired by CS 1.6's interface:
- **Background**: Dark grays (#1a1a1a, #2d2d2d)
- **Primary**: Orange/yellow (#ff9800, #ffa726) - reminiscent of bomb timer
- **Secondary**: Blue (#1976d2, #2196f3) - CT team color
- **Accent**: Green (#4caf50) - success states
- **Danger**: Red (#f44336) - terrorist team color
- **Text**: Light gray (#e0e0e0), white (#ffffff)

#### Typography
- Use monospace or system fonts for that tactical/military feel
- Consider fonts like: 'Courier New', 'Consolas', 'Monaco', or similar
- Clear, readable labels for all radio commands

#### Layout Suggestions
1. **Grid Layout**: Display sound buttons in a responsive grid
2. **Category Tabs**: Organize by Team Communication, Commands, Events, etc.
3. **Search Bar**: Quick filter for finding specific commands
4. **Volume Control**: Persistent slider in header/footer
5. **Visual Feedback**: Glowing or pulsing effects when sound plays

### UI Components to Create

#### Sound Button
- Display sound label (e.g., "Go Go Go")
- Show keyboard shortcut if assigned
- Visual state: idle, hover, playing, disabled
- Animate on press and during playback
- Consider showing waveform or equalizer animation

#### Category Filter
- Tabs or buttons to filter by category
- Show count of sounds in each category
- Smooth transitions between categories

#### Search/Filter
- Real-time search across sound names and categories
- Clear button to reset search
- Highlight matching text

#### Volume Control
- Slider with visual feedback
- Mute/unmute toggle
- Persist volume settings

#### Settings Panel (Optional)
- Keyboard shortcut configuration
- Theme customization
- Sound quality settings
- Favorites management

### Animation Guidelines

#### Button Interactions
```tsx
const soundButtonAnimation = {
  idle: {
    scale: 1,
    backgroundColor: 'rgba(45, 45, 45, 1)'
  },
  hover: {
    scale: 1.05,
    backgroundColor: 'rgba(255, 152, 0, 0.2)',
    transition: { duration: 0.2 }
  },
  tap: {
    scale: 0.95
  },
  playing: {
    scale: [1, 1.05, 1],
    backgroundColor: ['rgba(255, 152, 0, 0.3)', 'rgba(255, 152, 0, 0.5)', 'rgba(255, 152, 0, 0.3)'],
    transition: {
      duration: 0.5,
      repeat: Infinity,
      ease: 'easeInOut'
    }
  }
};
```

#### Page Transitions
- Smooth category switching
- Staggered grid item animations on load
- Fade in/out for search results

#### Visual Feedback
- Ripple effect on button press
- Pulse animation during sound playback
- Subtle glow effects for active sounds

## Data Structure

### Sound Configuration
Create a centralized sound configuration file:

```tsx
// constants/sounds.constants.ts
export const SOUNDS: Sound[] = [
  {
    id: 'ct-affirm',
    name: 'ct_affirm',
    label: 'Affirmative',
    path: '/radio/ct_affirm.wav',
    category: 'team-communication',
    team: 'ct',
    keyboardShortcut: '1'
  },
  {
    id: 'go',
    name: 'go',
    label: 'Go Go Go',
    path: '/radio/go.wav',
    category: 'commands',
    keyboardShortcut: 'g'
  },
  // ... all other sounds
];

export const SOUND_CATEGORIES = [
  { id: 'team-communication', label: 'Team Communication', icon: 'üí¨' },
  { id: 'commands', label: 'Commands', icon: '‚ö°' },
  { id: 'game-events', label: 'Game Events', icon: 'üéÆ' },
  { id: 'combat', label: 'Combat', icon: '‚öîÔ∏è' }
] as const;
```

## Features to Implement

### Core Features
1. ‚úÖ Play any CS 1.6 radio sound with one click
2. ‚úÖ Visual feedback when sound is playing
3. ‚úÖ Volume control
4. ‚úÖ Responsive grid layout
5. ‚úÖ Category filtering
6. ‚úÖ Search functionality

### Enhanced Features (Nice to Have)
1. üéØ Keyboard shortcuts for quick access
2. üéØ Favorites/Recently played section
3. üéØ Sound history
4. üéØ Copy sound name to clipboard
5. üéØ Share button to share specific sounds
6. üéØ Dark/Light theme toggle
7. üéØ Sound visualization (waveform or equalizer)
8. üéØ Download individual sounds
9. üéØ Soundboard layouts (grid, list, compact)
10. üéØ Custom sound playlists

### Advanced Features (Stretch Goals)
1. üöÄ Record combinations/sequences of sounds
2. üöÄ Upload custom sounds
3. üöÄ Social sharing of sound combinations
4. üöÄ Sound effects (echo, reverb, etc.)
5. üöÄ Mobile app version (PWA)

## Accessibility Considerations

### Keyboard Navigation
- Tab through all sound buttons
- Enter or Space to play sound
- Arrow keys to navigate grid
- ESC to stop all sounds
- Custom shortcuts for favorites

### Screen Reader Support
- Proper ARIA labels for all buttons
- Announce when sound starts/stops playing
- Describe keyboard shortcuts
- Provide text alternatives for visual states

### Visual Accessibility
- High contrast mode support
- Sufficient color contrast ratios (WCAG AA minimum)
- Don't rely solely on color to convey information
- Ensure touch targets are at least 44x44px

## Performance Optimization

### Audio Loading Strategy
1. **Lazy Load**: Load sounds on demand (first approach)
2. **Preload Popular**: Preload frequently used sounds
3. **Preload All**: Load all sounds on app init (if bundle size allows)
4. **Service Worker**: Cache audio files for offline use

### Bundle Optimization
- Use dynamic imports for large components
- Implement code splitting by route/feature
- Optimize audio file sizes (consider compression)
- Use tree-shaking to eliminate unused code

### Memory Management
- Clean up audio instances when components unmount
- Limit number of simultaneous audio instances
- Implement audio pooling if playing many sounds rapidly

## Testing Considerations

### Manual Testing Checklist
- [ ] All sounds play correctly
- [ ] Multiple sounds can overlap
- [ ] Volume control works
- [ ] Search/filter functions work
- [ ] Responsive on mobile, tablet, desktop
- [ ] Keyboard shortcuts work
- [ ] Animations are smooth (60fps)
- [ ] No memory leaks after extended use
- [ ] Works in all major browsers
- [ ] Accessibility features work

---

**Goal**: Create an authentic, beautiful, and performant CS 1.6 soundboard that brings nostalgia to players while showcasing modern React development practices.
